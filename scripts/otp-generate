#!/bin/bash

if [ -z "$CSF_USER_ID" ]
then
  echo "ERROR: CSF_USER_ID should contain group user ID"
  exit 1
fi

if [[ "$CSF_USER_ID" =~ [^0-9] ]] && [ "$CSF_USER_ID" != "admin" ]
then
  echo "ERROR: CSF_USER_ID should be numeric or 'admin'"
  exit 1
fi

if [ -z "$CSF_DB_USERNAME" -o -z "$CSF_DB_NAME" ]
then
  echo "ERROR: CSF_DB_USERNAME and CSF_DB_NAME should be configured"
  exit 1
fi

# Generate salt + pass and encrypt it into password
salt=`openssl rand -base64 18 | sed -e "s/[\"\']/-/g"`
pass=`openssl rand -base64 6`
token="$pass$salt"
encrypted_password=`echo -n $token | openssl dgst -sha1 | sed -e 's/^.*= //'`

# Save password to db
if [[ "$CSF_USER_ID" == "admin" ]]
then
  sql="WITH upsert AS (UPDATE csf_settings SET value='$salt' WHERE name='admin_salt' RETURNING *) INSERT INTO csf_settings (name, value) SELECT 'admin_salt', '$salt' WHERE NOT EXISTS (SELECT * FROM upsert); WITH upsert AS (UPDATE csf_settings SET value='$encrypted_password' WHERE name='admin_crypted_password' RETURNING *) INSERT INTO csf_settings (name, value) SELECT 'admin_crypted_password', '$encrypted_password' WHERE NOT EXISTS (SELECT * FROM upsert);"
else
  sql="UPDATE users SET crypted_password='$encrypted_password', salt='$salt', password_set='t' WHERE id=$CSF_USER_ID AND admin='t'"
fi
echo "$sql" | psql -U$CSF_DB_USERNAME $CSF_DB_NAME 1>/dev/null 2>&1

echo "SUCCESS: $pass"
exit 0

